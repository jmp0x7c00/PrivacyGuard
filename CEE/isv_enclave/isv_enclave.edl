/*
 * Copyright (C) 2011-2017 Intel Corporation. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * Neither the name of Intel Corporation nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

enclave {
    from "sgx_tkey_exchange.edl" import *;

    include "sgx_key_exchange.h"
    include "sgx_trts.h"

    trusted {

        public sgx_status_t ECALL_enclave_DO_config(
                                                int num_DOs);
                                                
        public sgx_status_t ECALL_enclave_init_ra(int b_pse, [out] sgx_ra_context_t *p_context);
        
        public sgx_status_t ECALL_enclave_ra_close(sgx_ra_context_t context);

        public sgx_status_t ECALL_verify_att_result_mac(
                                                  sgx_ra_context_t context,
                                                  [in,size=message_size] uint8_t* message, 
                                                  size_t message_size, 
                                                  [in,size=mac_size] uint8_t* mac, 
                                                  size_t mac_size);
        
        public sgx_status_t ECALL_put_secret_data(
                                            sgx_ra_context_t context,  
                                            [in,size=secret_size] uint8_t* p_secret,
                                            uint32_t secret_size,
                                            [in,count=16] uint8_t* p_gcm_mac,
                                            uint32_t provisioner_type);
        
        public sgx_status_t ECALL_compute_task1(
                                            sgx_ra_context_t context,
                                            uint32_t data_num,
                                            [in,count=data_num] uint32_t *dataSizes,
                                            [in,count=data_num] uint32_t *macSizes,
                                            [in,size=data_size] uint8_t* p_data_encrypted,
                                            uint32_t data_size,
                                            [in,count=mac_size] uint8_t *p_data_gcm_mac,
                                            uint32_t mac_size,
                                            [out,count=result_size] uint8_t *p_result_encrypted,
                                            uint32_t result_size,
                                            [out,size=16] uint8_t *p_result_gcm_mac);

        public sgx_status_t ECALL_compute_task2(
                                            sgx_ra_context_t context,
                                            uint32_t data_num,
                                            [in,count=data_num] uint32_t *dataSizes,
                                            [in,count=data_num] uint32_t *macSizes,
                                            [in,size=data_size] uint8_t* p_data_encrypted,
                                            uint32_t data_size,
                                            [in,count=mac_size] uint8_t *p_data_gcm_mac,
                                            uint32_t mac_size,
                                            [out,count=result_size] uint8_t *p_result_encrypted,
                                            uint32_t result_size,
                                            [out,size=16] uint8_t *p_result_gcm_mac);

        public sgx_status_t ECALL_compute_task3(
                                            sgx_ra_context_t context,
                                            uint32_t data_num,
                                            [in,count=data_num] uint32_t *dataSizes,
                                            [in,count=data_num] uint32_t *macSizes,
                                            [in,size=data_size] uint8_t* p_data_encrypted,
                                            uint32_t data_size,
                                            [in,count=mac_size] uint8_t *p_data_gcm_mac,
                                            uint32_t mac_size,
                                            [out,count=result_size] uint8_t *p_result_encrypted,
                                            uint32_t result_size,
                                            [out,size=16] uint8_t *p_result_gcm_mac);

        public sgx_status_t ECALL_get_K_result_hashes(
                                            sgx_ra_context_t context,
                                            [out,size=16] uint8_t *p_K_result_en,
                                            [out,size=16] uint8_t *p_K_result_gcm_mac,
                                            [out,size=32] uint8_t *p_K_result_hash_en_DC,
                                            [out,size=16] uint8_t *p_K_result_hash_DC_gcm_mac,
                                            [out,size=32] uint8_t *p_C_result_hash_en_DC,
                                            [out,size=16] uint8_t *p_C_result_hash_DC_gcm_mac);

    };




    untrusted {
        // To display string buffer inside the enclave.
        void OCALL_print_string([in, string] const char *str);
    };


};
